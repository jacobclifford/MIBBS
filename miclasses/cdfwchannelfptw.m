         % this contains cb energies
      % this contains cb energies
sdcw=load('deric.txt');         % this contains cb +w(S,C) energies
sduw=load('kelly.txt');         % this contains cb +w(S,C) energies
scb=load('cbcondits.txt');      % this contains cb energies
fpcb=load('cbfp.txt');          % this contains fps generated from file=adamiFileFP passed through t.sh
%fpdu=load('kellyfp.txt');        % this contains fps generated from file=adamiFileFP passed through t.sh
%fpdc=load('dericfp.txt');         % this contains fps generated from file=adamiFileFP passed through t.sh
fpdu2=load('kellyfptw.txt');        % this contains fps generated from file=adamiFileFP passed through t.sh
fpdc2=load('dericfptw.txt');         % this contains fps generated from file=adamiFileFP passed through t.sh

lfpdc=length(sdcw);
orcatfp=[fpdc2(1:lfpdc);fpdu2(lfpdc:end)];
orcatfp=sort(orcatfp);
orcat =[sdcw; sduw];    % this contains both dc and du conditional energies concatenated.
orcat=sort(orcat);
fpcb=sort(fpcb);
scb=sort(scb);
ls = length(orcat);
lscb=length(scb);
ma=max([orcat;fpdc2;fpdu2])
mi=min([orcat;fpdc2;fpdu2])
l=length(mi-1:.1:ma);
lm=mi-1:.1:ma;
ordctp=histc(sdcw,lm);
ordcfp=histc(fpdc2,lm);
ordutp=histc(sduw,lm);
ordufp=histc(fpdu2,lm);
orhtp=histc(orcat,lm);
orhfp=histc(orcatfp,lm);
cbhtp=histc(scb,lm);
cbhfp=histc(fpcb,lm);
orcdftp=zeros(1,l);
orcdffp=zeros(1,l);
cbcdftp=zeros(1,l);
cbcdffp=zeros(1,l);
 
% build cdf manually by iterating over the histograms and keeping a running
% sum (in the 'else' condition), the if condition is for the initial bin of
% each cdf, which is filled with initial histogram bin's value.  the cdf's
% are called :  or    and   cb.    (e.g. orcdftp and orcdffp...)

for i=1:(l)
    if i==1
   orcdftp(i) = ordctp(i);
   orcdffp(i) =  ordcfp(i);
   cbcdftp(i) =  ordutp(i);
   cbcdffp(i)= ordufp(i); 
    
    else
   orcdftp(i) = orcdftp(i-1) +ordctp(i);
   orcdffp(i) = orcdffp(i-1) + ordcfp(i);
   cbcdftp(i) = cbcdftp(i-1) + ordutp(i);
   cbcdffp(i)=cbcdffp(i-1) + ordufp(i);
    end
end
%ROC
%plot(orcdffp/ls,orcdftp/ls,'r',cbcdffp/ls,cbcdftp/ls,'b')


tpdc =  orcdftp;  %   load('TPDC.txt');
tpdu =  cbcdftp;          %load('TPDU.txt');
%tpcb=load('TPCB.txt');
fpdc=   orcdffp ;          %load('FPDC.txt');
fpdu=   cbcdffp;            %load('FPDU.txt');
%fpcb=load('FPCB.txt');


% dc on cbset   pos : dc,..   neg : du
%tpdc is the number of true positives as a function of energy cutoff,
%1-tpdc is the number of false negatives (since the file TPDC.txt, contains
%all the positives (the dc data set)


%tpdu is generated by running dc over du, 
% P = fn + tp,...        P is simply 89 ,.. while negative N = fp + tn, which is simply 225 ( the du data,.. we need a new n here for the du data...) 

P11=tpdc./tpdc(end);
P01= 1-P11; %          
P10=fpdc./fpdc(end);
P00=1-P10;
z= 1;%P11+P10 + P01 + P00;
p11=P11;%/z(1);
p10=P10 ;%/z(1);
p01=P01 ;% /z(1);
p00=P00;%/z(1);
for i=1:length(p11)
    if p11(i)==0
        p11(i)=.0000000001;
    end
end
for i=1:length(p10)
    if p10(i)==0
        p10(i)=.0000000001;
    end
end
for i=1:length(p01)
    if p01(i)==0
        p01(i)=.0000000001;
    end
end
for i=1:length(p00)
    if p00(i)==0
        p00(i)=.0000000001;
    end
end


zz = length(sdcw)+ length(fpdc2);
p1=length(sdcw)/zz ;%.3;  %p11+p10;
p0= length(fpdc2)/zz ;%.7;   %p00+p01;
%p1=.3;               % source distribution  P(S ) , where p1 = P(S=1), (these are records from the core data.)
%p0=.7 ; 
% f1= p11 +p10;          % output distribution
% f0= p00+p01;
% F1=f1./(f1+f0)*p1;
% F2=f0./(f1+f0)*p0;

F1= p11*p1 +p10*p0;    %p(c=1)=p(C=1|S=1)p(S=1) + p(C=1|S=0)p(S=0) =p11p1 +p10p0    %  P(C ) = P( P),.. variable P = C output variable
F2= p00*p0+p01*p1;
%Hps1 =p1.*( -p11.*log2(p11) -p10.*log2(p10)) + p0.*(-p01.*log2(p01)-p00.*log2(p00)) %contional entropy
Hps1 =p1.*( -p11.*log2(p11) -p01.*log2(p01)) + p0.*(-p10.*log2(p10)-p00.*log2(p00)) %contional entropy H(P|S)

Hp1=-F1.*log2(F1) - F2.*log2(F2); %output marginal entropy        H(P) = H(C ),......(i.e. C = P).

 
 I = Hp1-Hps1             %   I = H(P) - H(P|S)  
 

 
 P11=tpdu./tpdu(end);
P01= 1-P11; %          
P10=fpdu./fpdu(end);
P00=1-P10;
z= P11+P10 + P01 + P00;
p11=P11;%/z(1);
p10=P10 ;%/z(1);
p01=P01 ;% /z(1);
p00=P00;%/z(1);
for i=1:length(p11)
    if p11(i)==0
        p11(i)=.0000000000000000001;
    end
end
for i=1:length(p10)
    if p10(i)==0
        p10(i)=.0000000000000000001;
    end
end
for i=1:length(p01)
    if p01(i)==0
        p01(i)=.0000000000000000001;
    end
end
for i=1:length(p00)
    if p00(i)==0
        p00(i)=.0000000000000000001;
    end
end
zz = length(sduw)+ length(fpdu2);
p1= length(sduw)/zz ;%.3;  %p11+p10;
p0= length(fpdu2)/zz ;%.7;   %p00+p01;

F1= p11*p1 +p10*p0;
F2= p00*p0+p01*p1;
%F1=f1./(f1+f0)*p1;
%F2=f0./(f1+f0)*p0;
z0=(p11+p01);
z1=(p10+p00);
%Hps =p1.*( -p11.*log2(p11) -p10.*log2(p10)) + p0.*(-p01.*log2(p01)-p00.*log2(p00))
%Hps =p1.*( -(p11./z0).*log2(p11./z0) -(p01./z).*log2(p01./z0)) + p0.*(- (p10./z1).*log2(p10./z1)-(p00./z1).*log2(p00./z1)) %contional entropy
Hps =p1.*( -p11.*log2(p11) -p01.*log2(p01)) + p0.*(-p10.*log2(p10) - p00.*log2(p00))

Hp=-F1.*log2(F1) - F2.*log2(F2);
 
 I2 = Hp-Hps
 
plot(lm,I,'b',lm,I2,'r')
%plot(tpdu(:,2),I,'g',tpdu(:,2),I2,'r')
%set(lineobj, 'linewidth', 3);
lineobj = findobj('type', 'line');
set(lineobj, 'linewidth', 3);
legend('DC','DU','FontSize',15,'FontName','Times')
ylabel('$$I(\mathcal C;\mathcal P)$$','FontSize',15,'FontName','Times')
set(get(gca,'YLabel'),'Rotation',90)
 xlabel('$$E_c = E(S)+w(S,C=Classifier)$$','FontSize',15)
set(gca,'XLim' , [-2 20])
 % ylabel('I(C,P)','FontSize',18,'FontName','Times')
% xlabel('Energy','FontSize',18,'FontName','Times')
set(get(gca,'YLabel'),'interpreter','latex', 'FontSize', 15);
  set(get(gca,'XLabel'),'interpreter','latex', 'FontSize', 15);
set(lineobj, 'linewidth', 3);
lineobj = findobj('type', 'line');
set(lineobj, 'linewidth', 3);
%text(20,.2,'source variable (S) dist set at (.5,.5)' );
%text(10,.1,'predicted varible P dist, P( P=1 )=p1|1 p1 +p1|0 p0 ')
%set(gca,'XLim' , [0 7])
print(gcf,'-depsc','miclasses.eps')
