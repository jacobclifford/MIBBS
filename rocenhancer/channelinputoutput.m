tpdc = load('TPDC.txt');
tpdu = load('TPDU.txt');
tpcb=load('TPCB.txt');
fpdc=load('FPDC.txt');
fpdu=load('FPDU.txt');
fpcb=load('FPCB.txt');

% s=load('dcondit.txt');
% ss = load('ducondit.txt');
% scb=load('cbcondit.txt');
% % dc on cbset   pos : dc,..   neg : du
% % pos = tpdc,..  neg = tpdu       where tpdu is generated by running dc
% % over du, this is accomplished by using due.fa for the ecolisites.
% % P = fn + tp,...        P is simply 89 ( n),.. while negative N = fp + tn, which is simply 225 ( the du data,.. we need a new n here for the du data...) 
% n=length(scb);
% 
% %the FPs are stored in FPs directory, where they were generated from NEE
% %and Rep seqs.  This allowed the TPs to be masked out from the FP data by
% %subtracting out the number of Trues from the number of total Falses..
% %scatter( (fpdc(:,1)-tpdc(:,1) )./(fpdc(end,1)-tpdc(end,1)),tpdc(:,1)./tpdc(end,1),'r')
% x=0:1/s:1;
% hold on 
% %plot( fpdu(:,1),tpdu(:,1)./n,'g')
% %plot(( fpcb(:,1) -tpcb(:,1) )./(fpcb(end,1) - tpcb(end,1)),tpcb(:,1)./tpcb(end,1),'k')
% plot(( fpdc(:,1) -tpdc(:,1) )./(fpdc(end,1) - tpdc(end,1)),tpdc(:,1)./tpdc(end,1),'r',( fpcb(:,1) -tpcb(:,1) )./(fpcb(end,1) - tpcb(end,1)),tpcb(:,1)./tpcb(end,1),'b')
% 
% legend('OR','CB')
%          % this contains cb energies
%       % this contains cb energies
% sdcw=load('deric.txt');         % this contains cb +w(S,C) energies
% sduw=load('kelly.txt');         % this contains cb +w(S,C) energies
% scb=load('cbcondits.txt');      % this contains cb energies
% fpcb=load('cbfp.txt');          % this contains fps generated from file=adamiFileFP passed through t.sh
% fpdu=load('kellyfp.txt');        % this contains fps generated from file=adamiFileFP passed through t.sh
% fpdc=load('dericfp.txt');         % this contains fps generated from file=adamiFileFP passed through t.sh
% lfpdc=length(sdcw);
% % orcatfp=[fpdc(1:lfpdc);fpdu(lfpdc:end)];
% % orcatfp= min(orcatfp);        %sort(orcatfp);
% % orcat =[sdcw; sduw];    % this contains both dc and du conditional energies concatenated.
% % orcat= min(orcat);  %sort(orcat);
% % orcatfp=[fpdc,fpdu]';
% % orcatfp= min(orcatfp);        %sort(orcatfp);
% orcatfp=min([fpdc,fpdu]');
% orcatfp=sort(orcatfp');
% orcat =min([sdcw,sduw]');    % this contains both dc and du conditional energies concatenated.
% %orcat =92/(321).*sdcw' + 229/(321).*sduw';
% orcat=sort(orcat');
% 
% % orcat =[sdcw, sduw]';    % this contains both dc and du conditional energies concatenated.
% % orcat= min(orcat);  %sort(orcat);
% fpcb=sort(fpcb);
% scb=sort(scb);
% ls = length(orcat);
% lscb=length(scb);
% ma=max([orcat;orcatfp;fpcb;scb])
% mi=min([orcat;orcatfp;fpcb;scb])
% l=length(mi-1:.1:ma);
% lm=mi-1:.1:ma;
% orhtp=histc(orcat,lm);
% orhfp=histc(orcatfp,lm);
% cbhtp=histc(scb,lm);
% cbhfp=histc(fpcb,lm);
% orcdftp=zeros(1,l);
% orcdffp=zeros(1,l);
% cbcdftp=zeros(1,l);
% cbcdffp=zeros(1,l);
%  
% % build cdf manually by iterating over the histograms and keeping a running
% % sum (in the 'else' condition), the if condition is for the initial bin of
% % each cdf, which is filled with initial histogram bin's value.  the cdf's
% % are called :  or    and   cb.    (e.g. orcdftp and orcdffp...)
% 
% for i=1:(l)
%     if i==1
%    orcdftp(i) = orhtp(i);
%    orcdffp(i) =  orhfp(i);
%    cbcdftp(i) =  cbhtp(i);
%    cbcdffp(i)= cbhfp(i); 
%     
%     else
%    orcdftp(i) = orcdftp(i-1) +orhtp(i);
%    orcdffp(i) = orcdffp(i-1) + orhfp(i);
%    cbcdftp(i) = cbcdftp(i-1) + cbhtp(i);
%    cbcdffp(i)=cbcdffp(i-1) + cbhfp(i);
%     end
% end
%212015
%ROC
%plot(orcdffp/ls,orcdftp/ls,'r',cbcdffp/ls,cbcdftp/ls,'b')

% 
% tpdc =  orcdftp;  %   load('TPDC.txt');
% tpdu =  cbcdftp;          %load('TPDU.txt');
% %tpcb=load('TPCB.txt');
% fpdc=   orcdffp ;          %load('FPDC.txt');
% fpdu=   cbcdffp;            %load('FPDU.txt');
% %fpcb=load('FPCB.txt');
% 

% dc on cbset   pos : dc,..   neg : du
%tpdc is the number of true positives as a function of energy cutoff,
%1-tpdc is the number of false negatives (since the file TPDC.txt, contains
%all the positives (the dc data set)

tpdu=tpcb;
fpdu=fpcb;
%tpdu is generated by running dc over du, 
% P = fn + tp,...        P is simply 89 ,.. while negative N = fp + tn, which is simply 225 ( the du data,.. we need a new n here for the du data...) 

P11=tpdc(:,1)./tpdc(end,1);
P01= 1-P11; %          
P10=fpdc(:,1)./fpdc(end,1);
P00=1-P10;
z= 1;%P11+P10 + P01 + P00;
p11=P11;%/z(1);
p10=P10 ;%/z(1);
p01=P01 ;% /z(1);
p00=P00;%/z(1);
for i=1:length(p11)
    if p11(i)==0
        p11(i)=.0000000001;
    end
end
for i=1:length(p10)
    if p10(i)==0
        p10(i)=.0000000001;
    end
end
for i=1:length(p01)
    if p01(i)==0
        p01(i)=.0000000001;
    end
end
for i=1:length(p00)
    if p00(i)==0
        p00(i)=.0000000001;
    end
end

p1=.5 ;%tpdc(end,1)/fpdc(end,1);%  .3;               % source distribution  P(S ) , where p1 = P(S=1), (these are records from the core data.)
p0= 1-p1 ; %.7 ; 
% f1= p11 +p10;          % output distribution
% f0= p00+p01;
% F1=f1./(f1+f0)*p1;
% F2=f0./(f1+f0)*p0;

F1= p11*p1 +p10*p0;    %p(c=1)=p(C=1|S=1)p(S=1) + p(C=1|S=0)p(S=0) =p11p1 +p10p0    %  P(C ) = P( P),.. variable P = C output variable
F2= p00*p0+p01*p1;
%Hps1 =p1.*( -p11.*log2(p11) -p10.*log2(p10)) + p0.*(-p01.*log2(p01)-p00.*log2(p00)) %contional entropy
Hps1 =p1.*( -p11.*log2(p11) -p01.*log2(p01)) + p0.*(-p10.*log2(p10)-p00.*log2(p00)) %contional entropy H(P|S)

Hp1=-F1.*log2(F1) - F2.*log2(F2); %output marginal entropy        H(P) = H(C ),......(i.e. C = P).

 
 I = Hp1-Hps1             %   I = H(P) - H(P|S)  
 

 
 P11=tpdu(:,1)./tpdu(end,1);
P01= 1-P11; %          
P10=fpdu(:,1)./fpdu(end,1);
P00=1-P10;
z= P11+P10 + P01 + P00;
p11=P11;%/z(1);
p10=P10 ;%/z(1);
p01=P01 ;% /z(1);
p00=P00;%/z(1);
for i=1:length(p11)
    if p11(i)==0
        p11(i)=.0000000000000000001;
    end
end
for i=1:length(p10)
    if p10(i)==0
        p10(i)=.0000000000000000001;
    end
end
for i=1:length(p01)
    if p01(i)==0
        p01(i)=.0000000000000000001;
    end
end
for i=1:length(p00)
    if p00(i)==0
        p00(i)=.0000000000000000001;
    end
end

p1=.5 ;%tpdu(end,1)/fpdu(end,1);%  .3;               % source distribution  P(S ) , where p1 = P(S=1), (these are records from the core data.)
p0= 1-p1 ; %.7 ; 

F1= p11*p1 +p10*p0;
F2= p00*p0+p01*p1;
%F1=f1./(f1+f0)*p1;
%F2=f0./(f1+f0)*p0;
z0=(p11+p01);
z1=(p10+p00);
%Hps =p1.*( -p11.*log2(p11) -p10.*log2(p10)) + p0.*(-p01.*log2(p01)-p00.*log2(p00))
%Hps =p1.*( -(p11./z0).*log2(p11./z0) -(p01./z).*log2(p01./z0)) + p0.*(- (p10./z1).*log2(p10./z1)-(p00./z1).*log2(p00./z1)) %contional entropy
Hps =p1.*( -p11.*log2(p11) -p01.*log2(p01)) + p0.*(-p10.*log2(p10) - p00.*log2(p00))

Hp=-F1.*log2(F1) - F2.*log2(F2);
 
 I2 = Hp-Hps
 
plot(tpdc(:,2),I,'g',tpdc(:,2),I2,'r')
%plot(tpdu(:,2),I,'g',tpdu(:,2),I2,'r')
legend('OR','CB')
ylabel('$$I(\mathcal I;\mathcal O)$$','FontSize',15,'FontName','Times')
set(get(gca,'YLabel'),'Rotation',90)
xlabel(' energy threshold $$E_c$$ ( cutoff )','FontSize',15)
%text(-10,.4,'CB negatives: all sites in CRMs (i.e both strands with overlapping scanning windown)' );
%set(gca,'XLim' , [0 7])
set(gca,'FontSize',15)
% xlabel({' N ', ' N is the number of sampled sequences from model', 'used  in alignment for constructing empirical pwm' })
% ylabel('$$<I> =   \sum_i \sum_j f_{ij} \log(p_{oj}/f_{ij})$$ GC content = .4');
set(get(gca,'YLabel'),'interpreter','latex', 'FontSize', 15);
  set(get(gca,'XLabel'),'interpreter','latex', 'FontSize', 15);
  set(gca,'XLim' , [-2 13])
set(gca,'YLim' , [0 .55])
% 
 %set(get(gca,'YLabel'),'Rotation',90)
% 
% h=title(' fit of DU 5 species (48sites) $$ < I > $$') 
% set(h,'interpreter','latex', 'FontSize', 15);




lineobj = findobj('type', 'line');
set(lineobj, 'linewidth', 3);
print(gcf,'-depsc','mienhancers.eps')
